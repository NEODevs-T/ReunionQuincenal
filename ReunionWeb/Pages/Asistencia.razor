@page "/asistencia"

@inject IDbReunionService DbReunionService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAPIReunionService APIReunionService
@inject ILocalStorageService LocalStorage
@attribute [Authorize(Roles = "Admin, AdminChempro, SupIntendente")]

<h3>Asistencia</h3>
<p></p>

<div>
    <BSCol Column="4">

        @if (@mensaje == "Registro Exitoso")
        {
            <BSAlert Color="BSColor.Success" IsDismissible="true" HasIcon="true" @ref="_alertRef" Dismissed="Dismissed">
                @mensaje
            </BSAlert>
        }
        else if (@mensaje == "Error al Insertar los datos, Intente de Nuevo" | mensaje == "Seleccione el area." | mensaje == "Solo se puede registrar a las 9:00 am")
        {

            <BSAlert Color="BSColor.Warning" IsDismissible="true" HasIcon="true" @ref="_alertRef" Dismissed="Dismissed">
                @mensaje
            </BSAlert>

        }
        else if (@mensaje != "")
        {
            <BSAlert Color="BSColor.Danger" IsDismissible="true" HasIcon="true" @ref="_alertRef" Dismissed="Alertas.Dismissed">
                @mensaje
            </BSAlert>
        }

    </BSCol>
</div>

<p></p>


<p></p>




<BSContainer>

    @if (APIReunionService.centro.Count() == 0)
    {
        <div class="loader"></div>
    }
    else
    {


        <BSRow>
            <BSCol Column="4">


                <BSInput InputType="InputType.Select" @bind-Value="Div">
                    <option value="">Seleccione</option>
                    @foreach (var d in APIReunionService.centro)
                    {
                    <option value="@d.Cnom">@d.Cnom</option>
                    }
            </BSInput>
        </BSCol>

        <BSCol ColumnSmall="3">
            <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="Get">   Asistentes  <span class="oi oi-check"></span></BSButton>
        </BSCol>

    </BSRow>

    }

</BSContainer>

<p></p>





@if (APIReunionService.cargoreus.Count() > 0 && dataIsLoaded == 2)
{

    <BSCol Column="6">
        <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
            <BSTHead Class="cabecera">
                <BSTR>


                    <BSTD>Personal</BSTD>
                    <BSTD>Presencia</BSTD>
                    <BSTD>Suplencia</BSTD>

                </BSTR>
            </BSTHead>
            <BSTBody>
                @foreach (var d in listaAsistencia)
                {


                    <BSTR>

                        <BSTD>@d.AridCargoRNavigation.Crnombre</BSTD>
                        <BSTD>
                            <div Class="@BS.Form_Check @BS.Form_Switch">
                                <BSInputCheckbox CheckedValue="@(1)" Color="BSColor.Success" @bind-Value="d.ArAsistente" />
                                <BSLabel IsCheckLabel="true">

                                </BSLabel>
                            </div>
                        </BSTD>
                        <BSTD>
                            <div Class="@BS.Form_Check">
                                <BSInputCheckbox CheckedValue="@(1)"  @bind-Value="d.ArSuplente" />
                             
                            </div>
                        </BSTD>

                    </BSTR>


                }


            </BSTBody>

        </BSTable>
        <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="Save">   Guardar  <span class="oi oi-check"></span></BSButton>
    </BSCol>


}
else if (APIReunionService.cargoreus.Count() == 0 && dataIsLoaded == 2)
{
    <p>No se ha cargado personal a este centro.</p>
}
else if (dataIsLoaded == 1 && APIReunionService.cargoreus.Count() == 0)
{
    <div class="loader"></div>
}



@code {

    private Asistencium asisform = new Asistencium();
    private AsistenReu asiform = new AsistenReu();
    private List<Asistencium> asis = new List<Asistencium>();
    private List<CargoReu> cr = new List<CargoReu>();
    private AsistenReu reuform;

    private int fecha = int.Parse(DateTime.Now.ToString("yyyyMMdd"));
    private Alerts Alertas = new Alerts();
    private string mensaje = "", result = "";//resultado del save;
    int dataIsLoaded = 0;
   // private string RadioValue { get; set; }
    private string Div { get; set; }
    private List<AsistenReu> listaAsistencia { get; set; }

    private bool _buttonDisabled = true;
    private BSAlert? _alertRef;



    private List<Claim> claims { get; set; }

    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);




    }


    protected override async Task OnInitializedAsync()
    {

        await CreateData();
        if (claims[1].Value == "Admin")
        {
            await APIReunionService.GetCentros("All");
        }
        else
        {
            await APIReunionService.GetCentros(claims[6].Value.ToString());
        }




    }

    protected async Task Get()
    {
        if (dataIsLoaded != 1)
        {
            dataIsLoaded = 1;
            await APIReunionService.GetAsistencia(Div);
            cr = APIReunionService.cargoreus;
            listaAsistencia = new List<AsistenReu>();

            for (var i = 0; i < cr.Count; i++)
            {
                reuform = new AsistenReu();
                reuform.Ararea = Div;
                reuform.Arfecha = DateTime.Now;
                reuform.AridCargoRNavigation = cr[i];
                listaAsistencia.Add(reuform);
            }


            for (var i = 0; i < cr.Count; i++)
            {

                listaAsistencia[i].AridCargoR = APIReunionService.cargoreus[i].IdCargoR;
            }


            dataIsLoaded = 2;

        }
    }


    protected async Task Save()
    {

        int time = int.Parse(DateTime.Now.ToString("hh"));
        try
        {
            if (time == 9)
            {
                mensaje = await APIReunionService.Postasistencia(listaAsistencia);
                dataIsLoaded = 0;
                Show();
            }
            else
            {
                mensaje = "Solo se puede registrar a las 9:00 am";
                dataIsLoaded = 0;
                Show();
            }
        }
        catch (Exception ex)
        {

            mensaje = "Error al Insertar los datos, Intente de Nuevo";
            Show();
        }
    }




    protected async Task Reset()
    {
        asisform = new Asistencium();
    }



    private void Show()
    {
        _buttonDisabled = true;
        _alertRef?.Open();
    }

    private void Dismissed()
    {
        _buttonDisabled = false;
    }
}