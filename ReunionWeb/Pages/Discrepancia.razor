@page "/discrepancia"


@inject IDbReunionService DbReunionService
@inject IAPIReunionService APIReunionService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Admin, AdminChempro, SupIntendente, SupIntendenteGeneral,SuperAdmin")]


<h3>Discrepancias</h3>

<p></p>

<BSForm Model="Reuniondb" Class="boxhome" IsRow="true" Gutters="Gutters.Medium" OnSubmit="Insert" OnReset="Reset">
    <DataAnnotationsValidator />
    <BSCol ColumnMedium="8">
        @_message
        <BSValidationSummary />
    </BSCol>
    <BSRow>

    
        <BSCol Column="3">
            <BSLabel>Centro</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="IdCent">
                <option value="">Seleccione...</option>
                @foreach (var d in APIReunionService.centro)
                {
                    <option value="@d.IdCentro">@d.Cnom</option>
                }
            </BSInput>
          
        </BSCol>



        <BSCol Column="3">
            <BSLabel>Division</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="IdDiv">
              

                <option value="">Seleccione...</option>
                @foreach (var d in APIReunionService.centro)
                {
                    @foreach (var e in d.Divisions.Where(di => di.IdCentro == IdCent))
                    {

                        <option value="@e.IdDivision">@e.Dnombre</option>

                    }
                }
            </BSInput>
         
        </BSCol>


        <BSCol Column="3">
            <BSLabel>Línea</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.Rdarea">
                <option value="">Seleccione...</option>
                @foreach (var d in APIReunionService.centro)
                {
                    @foreach (var e in d.Lineas.Where(li => li.IdDivision == IdDiv && li.IdDivisionNavigation.IdCentro == IdCent))
                    {
                      
                        <option value="@e.Lnom">@e.Lnom</option>
                       
                    }
                }
            </BSInput>
          
        </BSCol>

    </BSRow>
    <p></p>
    <BSRow>

        <BSCol Column="2">
            <BSRow>
                <BSLabel>Filtrar: </BSLabel>
            </BSRow>


            <BSInputRadio CheckedValue="@("0")" @bind-Value="tipoequipo" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                <span class="oi oi-list"></span>
            </BSInputRadio>

            <BSInputRadio CheckedValue="@("1")" @bind-Value="tipoequipo" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                <span class="oi oi-magnifying-glass"></span>
            </BSInputRadio>


        </BSCol>
        @if (APIReunionService.centro.Count > 0 & tipoequipo == "0")
        {
          
            @if (Reuniondb.Rdcentro != "Chempro")
            {
                <BSCol Column="4">
                    <BSLabel>C. Equipo</BSLabel>
                    <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.RdcodEq">

                        <option value="">Seleccione...</option>
                        @foreach (var d in APIReunionService.equipos)
                        {
                            if (Reuniondb.Rdarea == d.IdLineaNavigation.Lnom)
                            {
                                <option value="@d.EcodEquiEam">@d.EcodEquiEam - @d.EnombreEam</option>
                            }
                        }


                    </BSInput>
               
                </BSCol>

            }
            else
            {
                <BSCol Column="4">
                    <BSLabel>C. Equipo</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="Reuniondb.RdcodEq" />
                  
                </BSCol>
            }
        }
        else if (APIReunionService.centro.Count > 0 & tipoequipo == "1")
        {
            <BSCol Column="4">
                <BSLabel>C. Equipo</BSLabel>
                <div class="autocomplete">
                    <input @bind=selectedEquipoId @oninput=HandleInput class="form-control filter" />
                    @if (equiposfiltro is not null)
                    {
                        <ul class="options">
                            @if (equiposfiltro.Any())
                            {

                                @foreach (var e in equiposfiltro)
                                {
                                    if (Reuniondb.Rdarea == e.IdLineaNavigation.Lnom)
                                    {
                                        <li class="option" @onclick=@(_ => SelectEquipo(e.EcodEquiEam))>
                                            <span class="option-text">@e.EcodEquiEam - @e.EnombreEam</span>
                                        </li>
                                    }
                                }
                            }
                            else
                            {
                                <li class="disabled option">No results</li>
                            }
                        </ul>
                    }
                </div>
                @if (!string.IsNullOrWhiteSpace(selectedEquipoId))
                {
                    <p class="mt-4">
                        @selectedEquipoName - <strong>@selectedEquipoId</strong>
                    </p>
                }
              
            </BSCol>
        }
      


        <BSCol Column="3">
            <BSLabel>Ksf</BSLabel>

            <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.Idksf">

                <option value="">Seleccione...</option>
                @foreach (var d in APIReunionService.ksfs)
                {
                    <option value="@d.Idksf">@d.KsfNombre</option>
                }

            </BSInput>
          
        </BSCol>


    </BSRow>
    <p></p>
    <BSRow>
        <BSCol Column="9">
            <BSLabel>Discrepancia</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="Reuniondb.Rddisc" />
         
        </BSCol>
    </BSRow>

    <p></p>

    <BSRow>
        <p></p>

        <BSCol Column="3">
            <BSLabel>Responsable</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.IdResReu">
                <option value="">Seleccione...</option>

                @foreach (var d in APIReunionService.resporeu)
                {
                    <option value="@d.IdResReu">@d.Rrnombre</option>
                }
            </BSInput>
       
        </BSCol>

    </BSRow>


    <p></p>
    <p></p>

    <BSCol Column="12">
        <BSButton Color="BSColor.Success" Size="Size.ExtraSmall" IsSubmit>  Guardar <span class="oi oi-check"></span></BSButton>
        <BSButton Color="BSColor.Primary" Size="Size.ExtraSmall" IsReset>  Nuevo </BSButton>
    </BSCol>
</BSForm>


@code {

    [CascadingParameter]
    //private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Claim> claims { get; set; }

    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }


    ReuDium Reuniondb = new ReuDium();

    private NotifiRadzen Notificar = new NotifiRadzen();//Logic para crear las noyificaciones radzen
    private string _message = "";
    private DateTime fechahoy, fechatrabajo = DateTime.Today;
    private string fechahoy2;
    private int Idretornado;
    private string tipoequipo { get; set; } = "1";//validar si es lista o busqueda de equipo
    CambStat CambStat = new CambStat();//Formulario para agregar que usuario hizo el cambio de status.
    CambFec CambFec = new CambFec();//Formulario para agregar que usuario hizo el cambio de fecha.


    [Required(ErrorMessage = "Seleccione el Centro")]
    private int? IdCent { get; set; }
    [Required(ErrorMessage = "Seleccione la división.")]
    private int? IdDiv { get; set; }



    private string mensaje = "";


    protected override async Task OnInitializedAsync()
    {

        await CreateData();
        await APIReunionService.Getksf();
        await APIReunionService.GetResReu();
        if (claims[1].Value == "Admin" | claims[1].Value == "SuperAdmin")
        {

            await APIReunionService.GetCentrosxEmpresa("All" + claims[10].Value);
            await APIReunionService.GetEquiposEAM("All" + claims[10].Value);

        }
        else
        {

            await APIReunionService.GetCentrosxEmpresa(claims[11].Value);      
            await APIReunionService.GetEquiposEAM(claims[11].Value.ToString());

        }
        IdCent = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
        IdDiv = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdDiv"))?.Value);
       
        APIReunionService.resporeu=APIReunionService.resporeu.Where(a => a.Rrdesc == claims.FirstOrDefault(c => c.Type.Contains("Empresa"))?.Value | string.IsNullOrEmpty(a.Rrdesc)).ToList();
    }

    protected async Task Insert(EditContext e)
    {

        //Reuniondb.Fecha = fecha;
        try
        {
            Reuniondb.Rdstatus = "Pendiente";
            Reuniondb.IdPais = int.Parse(claims.FirstOrDefault(c => c.Type == "IdPais")?.Value);
            Reuniondb.IdEmpresa = int.Parse(claims.FirstOrDefault(c => c.Type == "IdEmpresa")?.Value);

                //Guara cod equipo si es por la lista
                if (tipoequipo == "1")
                {
                    Reuniondb.RdcodEq = selectedEquipoId;

                }

            if (e.Validate())
            {
                Reuniondb.RdfecReu = (fechahoy = DateTime.Now);
                Reuniondb.RdfecTra = fechatrabajo;

                Reuniondb.Rdcentro = APIReunionService.centro.Where(c => c.IdCentro == IdCent).FirstOrDefault(c => c.IdCentro.Equals(IdCent)).Cnom;
                //Asigno el id de la division al form
                foreach (var d in APIReunionService.centro)
                {
                    foreach (var f in d.Lineas)
                    {
                        if (IdDiv == f.IdDivisionNavigation.IdDivision)
                        {
                            Reuniondb.Rddiv = f.IdDivisionNavigation.Dnombre;
                        }
                    }
                }

                if (Reuniondb.Rdarea is null)
                {

                    mensaje = "Seleccione el area.";
                     NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));
           
                }
                else if (Reuniondb.Rddiv is null)
                {
                    mensaje = "Seleccione la division.";
                    NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));

                }
                else if (Reuniondb.Rddisc is null)
                {
                    mensaje = "Llene la discrepancia";
                                         NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));

                }

                else if (Reuniondb.Rdstatus is null)
                {
                    mensaje = "Seleccione status";
                    NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));

                }
                else
                {

                    CambStat.IdReuDiaNavigation = Reuniondb;
                    CambStat.Cbfecha = DateTime.Now;
                    CambStat.Cbstat = "Pendiente";
                    CambStat.Cbuser = claims[2].Value + " " + claims[3].Value;

                    CambFec.IdReuDiaNavigation = Reuniondb;
                    CambFec.Cffec = DateTime.Now;
                    CambFec.CffecNew = DateTime.Now;
                    CambFec.Cfuser = claims[2].Value + " " + claims[3].Value;

                    await DbReunionService.InsertarRegistros(CambFec, CambStat);

                    mensaje = "Registro Exitoso";
                    Reuniondb = new ReuDium();
                    CambStat = new CambStat();
                    CambFec = new CambFec();
                    IdDiv = null;
                    equiposfiltro = null;
                    selectedEquipoName = selectedEquipoId = null;
                    fechatrabajo = DateTime.Today;

                    NotificationService.Notify(Notificar.Notificacion("exito", mensaje, ""));

                    //await Reset();
                    //Reuniondb = new BdDiv1();

                }
            }


        }
        catch (Microsoft.EntityFrameworkCore.DbUpdateException ex)
        {
            NotificationService.Notify(Notificar.Notificacion("advertencia", "Error de conexión", "Error de conexión de datos.Intente de nuevo "));

        }
        catch (Exception ex)
        {
            NotificationService.Notify(Notificar.Notificacion("error", "Error inesperado.",  ex.Message));
           
        }


    }


    protected async Task Reset()
    {
        Reuniondb = new ReuDium();
        CambStat = new CambStat();
        CambFec = new CambFec();
        IdDiv = null;
        fechatrabajo = DateTime.Today;
    }

    List<EquipoEam>? equiposfiltro;
    string? selectedEquipoId;
    string? selectedEquipoName;
    string? filter;
    bool codsuccess = false;



    async Task HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        if (filter?.Length > 0)
        {
            equiposfiltro = APIReunionService.equipos.Where(a => a.EcodEquiEam.Contains(filter) | a.EnombreEam.Contains(filter.ToUpper())).ToList();
        }
        else
        {
            equiposfiltro = null;
            selectedEquipoName = selectedEquipoId = null;
        }
    }

    void SelectEquipo(string id)
    {
        selectedEquipoId = id;
        selectedEquipoName = equiposfiltro!.First(c => c.EcodEquiEam.Equals(selectedEquipoId)).EnombreEam;
        equiposfiltro = null;
    }

    protected async Task BuscarLineas(ChangeEventArgs e)
    {


        if (IdDiv != 0)
        {

            await APIReunionService.GetLineas(IdDiv.Value);

        }
    }
}