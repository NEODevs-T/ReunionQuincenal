@page "/pendientes"
@page "/pendientes/{accion}/{division}/{f1}/{f2}/{tipo}/{est}"
@inject IDbReunionService DbReunionService
@inject IAPIReunionService APIReunionService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IJSRuntime IJS



<h3>Asuntos</h3>

<BSContainer>

    @if (APIReunionService.centro.Count() == 0)
    {
        <div class="loader"></div>
    }
    else
    {
        @error


        <BSRow>
            <BSCol Column="3">
                <BSLabel>Centro</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="IdCentro">
                    <option value=0>Seleccione</option>
                    @foreach (var d in APIReunionService.centro)
                    {
                        <option value="@d.IdCentro">@d.Cnom</option>
                    }
                </BSInput>
            </BSCol>


            <BSCol Column="3">
                <BSLabel>División</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="IdDiv">
                    <option value=0>Seleccione</option>
                    @foreach (var d in APIReunionService.centro)
                    {
                        @foreach (var e in d.Divisions)
                        {
                            if (IdCentro == d.IdCentro)
                            {
                                <option value="@e.IdDivision">@e.Dnombre</option>
                            }
                        }
                    }
                </BSInput>
            </BSCol>
            @if (DbReunionService.reudiatablas.Count() > 0 && dataIsLoaded == 2)
            {
                <BSCol Column="3">
                    <BSLabel>Línea</BSLabel>
                    <BSInput InputType="InputType.Select" @bind-Value="NombreLinea">
                        <option value="Todo">Todo</option>
                        @foreach (var d in APIReunionService.centro)
                        {
                            @foreach (var e in d.Lineas)
                            {
                                if (IdDiv == e.IdDivision)
                                {
                                    <option value="@e.Lnom">@e.Lnom</option>
                                }
                            }
                        }
                    </BSInput>
                </BSCol>

            }
            <BSCol Column="3">
                <BSLabel>Estado</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="Status">
                    <option value="Total Pendiente">Total Pendiente</option>
                    <option value="Todo">Todo</option>
                    <option value="Pendiente">Pendiente</option>
                    <option value="Pendiente-Responsable">Pendiente/Responsable</option>
                    <option value="Listo">Listo</option>
                    <option value="Cerrado">Cerrado</option>
                </BSInput>
            </BSCol>


            
            @*
        <BSCol Column="3" ColumnSmall="2">
        <BSLabel> Desde</BSLabel>
        <BSInput InputType="InputType.Date" @bind-Value="fecha1" />
        </BSCol>

        <BSCol Column="3" ColumnSmall="2">
        <BSLabel>Hasta</BSLabel>
        <BSInput InputType="InputType.Date" @bind-Value="fecha2" />
        </BSCol>*@
        </BSRow>
        <p></p>
        <BSRow>

            <BSCol Column="3">
                <BSLabel>Código</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="Codigo">
                    <option value="Todo">Todo</option>
                    <option value="1">1- En Curso</option>
                    <option value="2">2- Próxima Parada</option>
                    <option value="3">3- Falta Repuesto</option>
                    <option value="4">4- Falta de Personal</option>
                    <option value="5">5- Eq. no Disponible</option>
                </BSInput>
            </BSCol>
          

            <BSCol Column="3">
                <BSRow>
                    <BSLabel>  Ordenar </BSLabel>
                </BSRow>
                <BSInputRadio CheckedValue="@("2")" @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                    Fecha Trabajo
                    <span class="oi oi-cog"></span>
                </BSInputRadio>
            </BSCol>

            <BSCol Column="3">
                <BSRow>
                    <BSLabel>  Ordenar </BSLabel>
                </BSRow>
                <BSInputRadio CheckedValue="@("0")" @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                    Fecha Reunión
                    <span class="oi oi-people"></span>
                </BSInputRadio>
            </BSCol>


            <BSCol Column="3">
                <BSRow>
                    <BSLabel>Buscar</BSLabel>
                </BSRow>
                <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="Get">  Consultar <span class="oi oi-check"></span></BSButton>
             </BSCol>

           
        </BSRow>
        <p></p>

        @*Filltros extra*@
        <BSRow>
            @if (DbReunionService.reudiatablas.Count() > 0 && dataIsLoaded == 2)
            {
                <BSCol Column="3">
                    <BSLabel>Responsable</BSLabel>
                    <BSInput InputType="InputType.Select" @bind-Value="idrespo">
                        <option value=0>Todo</option>
                        @foreach (var d in APIReunionService.resporeu)
                        {

                            <option value="@d.IdResReu">@d.Rrnombre</option>

                        }
                    </BSInput>
                </BSCol>

                @* <BSCol Column="3">
                    <BSLabel>ODT</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="BuscarOdt" />

                </BSCol>

                <BSCol Column="3">
                    <BSLabel>Ksf</BSLabel>

                    <BSInput InputType="InputType.Select" @bind-Value="IdKsf">

                        <option value="0">Todo</option>
                        @foreach (var d in APIReunionService.ksfs)
                        {
                            <option value="@d.Idksf">@d.KsfNombre</option>
                        }

                    </BSInput>
                </BSCol> *@


                <BSCol Column="2">
                    <BSRow>
                        <BSLabel>Imprimir</BSLabel>
                    </BSRow>
                    <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="PrintDocument">  <span class="oi oi-print"></span></BSButton>
                </BSCol>

            }
        </BSRow>
    }

</BSContainer>

<p></p>


@if (DbReunionService.reudiatablas.Count() > 0 && dataIsLoaded == 2)
{
    

    <BSTable  IsStriped="true" IsBordered="true" >
        <BSTHead Class="cabecera">
            <BSTR>

                @*<BSTD>Id</BSTD>*@
                
                <BSTD>Área</BSTD>
                <BSTD>Ksf</BSTD>
                <BSTD>C. Equipo</BSTD>
                <BSTD ColSpan="4">Discrepancia</BSTD>
                <BSTD>Código</BSTD>
                <BSTD>Plan de Acción</BSTD>
                <BSTD>Tiempo</BSTD>
                <BSTD>Responsable</BSTD>
                <BSTD>Status</BSTD>
                <BSTD>ODT</BSTD>
                <BSTD>Fecha de Reunión</BSTD> @*Fecha del dia de reunion*@
                <BSTD>Fecha del Trabajo</BSTD>@*Fecha de listo el trabajo*@
                <BSTD></BSTD>

            </BSTR>
        </BSTHead>
        <BSTBody>
   
            @if (UsrRol != "")
            {
                listareu = DbReunionService.reudiatablas.Where(r => r.IdResReuNavigation.Rrnombre.StartsWith(UsrRol)).ToList();
            }
            else
            {
                listareu = DbReunionService.reudiatablas;

            }

         
            @foreach (var d in listareu)
            {
                @if (Codigo == d.RdcodDis | Codigo == "Todo")
                {
                   
                    @if (NombreLinea == "Todo" | NombreLinea == d.Rdarea)
                    {
                        @if (idrespo == 0 | idrespo == d.IdResReu)
                        {
                            <BSTR>
                                @*<BSTD>@d.IdReuDia</BSTD>*@                               
                                <BSTD>@d.Rdarea</BSTD>
                                <BSTD>@d.IdksfNavigation.KsfNombre</BSTD>  
                                <BSTD>@d.RdcodEq</BSTD>
                                <BSTD ColSpan="4">@d.Rddisc.ToUpperInvariant()</BSTD>
                                <BSTD>@d.RdcodDis</BSTD>
                                <BSTD Class="textotabla">@d.RdplanAcc</BSTD>
                                <BSTD>@d.Rdtiempo</BSTD>

                                @if (@d.IdResReuNavigation.Rrnombre == "Por Definir")
                                {
                                    <BSTD Class="Definir">@d.IdResReuNavigation.Rrnombre </BSTD>
                                }
                                else
                                {
                                    <BSTD>@d.IdResReuNavigation.Rrnombre </BSTD>
                                }

                                @if (@d.Rdstatus == "Listo")
                                {
                                    <BSTD Class="listo">@d.Rdstatus</BSTD>
                                }
                                else if (@d.Rdstatus == "Cerrado")
                                {
                                    <BSTD Class="Cerrado">@d.Rdstatus</BSTD>
                                }
                                else
                                {
                                    <BSTD Class="pendiente">@d.Rdstatus</BSTD>
                                }
                                <BSTD>@d.Rdodt</BSTD>
                                <BSTD>@d.RdfecReu.ToString("dd/MM/yyyy")</BSTD>
                                <BSTD>@d.RdfecTra.ToString("dd/MM/yyyy")</BSTD>
                                <BSTD>
                                    <BSRow>
                                        <BSCol>
                                            <button class="btn btn-success" @onclick="(() => Editar(d.IdReuDia))"><i class="oi oi-pencil"></i></button>
                                        </BSCol>
                                        <BSCol>
                                            @if (UsrAdmin != "")
                                            {
                                                <BSButton Color="BSColor.Primary" IsOutlined @onclick="(() => GetHistory(d.IdReuDia))" Target="History"><i class="oi oi-eye"></i></BSButton>
                                            }
                                        </BSCol>
                                    </BSRow>
                                </BSTD>
                            </BSTR>
                        }
                    }
                }             
            }
        </BSTBody>
    </BSTable>


    @*Mostrar la trazabilidad*@
    <BSModal IsCentered="true" DataId="History">
        <Header>Trazabilidad</Header>
        <Content>
            <h5>Cambios de Estados:</h5>
            @if (cambiostatuss.Count() > 0 && cargandocambio == true)
            {
                <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
                    <BSTHead Class="cabecera">
                        <BSTR>
                            <BSTD>Fecha del Cambio</BSTD>
                            <BSTD>Status Nuevo</BSTD>
                            <BSTD>Usuario</BSTD>
                        </BSTR>
                    </BSTHead>
                    <BSTBody>
                        @foreach (var d in cambiostatuss)
                        {
                            <BSTR>
                                <BSTD>@d.Cbfecha</BSTD>
                                <BSTD>@d.Cbstat</BSTD>
                                <BSTD>@d.Cbuser</BSTD>
                            </BSTR>
                        }
                    </BSTBody>
                </BSTable>
            }
            else if (cambiostatuss.Count() == 0 && cargandocambio == false)
            {
                <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Success" />
            }
            else if (cambiostatuss.Count() == 0 && cargandocambio == true)
            {
                <p>No hay registros aún...</p>
            }
            <p></p>
            <p></p>
            <h5>Cambios de Fecha de Trabajo:</h5>

            @if (cambiofechas.Count() > 0)
            {
                <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
                    <BSTHead Class="cabecera">
                        <BSTR>
                            <BSTD>Fecha del Cambio</BSTD>
                            <BSTD>Nueva Fecha de Trabajo</BSTD>
                            <BSTD>Usuario</BSTD>
                        </BSTR>
                    </BSTHead>
                    <BSTBody>
                        @foreach (var d in cambiofechas)
                        {
                            <BSTR>
                                <BSTD>@d.Cffec</BSTD>
                                <BSTD>@d.CffecNew</BSTD>
                                <BSTD>@d.Cfuser</BSTD>
                            </BSTR>
                        }
                    </BSTBody>
                </BSTable>
            }
            else if (cambiofechas.Count() == 0 && cargandocambio == false)
            {
                <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Success" />
            }
            else if (cambiofechas.Count() == 0 && cargandocambio == true)
            {
                <p>No hay registros aún...</p>
            }
        </Content>
        <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Success" @onclick="modal.HideAsync">Aceptar</BSButton>

        </Footer>
    </BSModal>


}
else if (dataIsLoaded == 1 && DbReunionService.reudiatablas.Count() == 0)
{
    <div class="loader"></div>
}
else if (dataIsLoaded == 2 && DbReunionService.reudiatablas.Count() == 0)
{
    <p>No hay datos para esta fecha.</p>
}

@code {

    [Parameter]
    public string? accion { get; set; }//centro
    [Parameter]
    public string? division { get; set; }//division
    [Parameter]
    public string? f1 { get; set; }
    [Parameter]
    public string? f2 { get; set; }
    [Parameter]
    public string? tipo { get; set; }
    [Parameter]
    public string? est { get; set; }

    int dataIsLoaded = 0;
    string ayer = DateTime.Now.AddDays(-1).ToString("yyyyMMdd"), error;
    private bool data { get; set; } = false; //Centro

    private int IdCentro { get; set; } //id del Centro
    private int IdDiv { get; set; } //id de la division
    private int IdKsf { get; set; } //id del Ksf
    private string NombreLinea { get; set; } = "Todo";//id de la linea
    private string BuscarOdt { get; set; } = "";//Odt

    private int CentroComedor;//Variable para verificar si es el comedor venezuela;


    private string Codigo { get; set; } = "Todo"; //Codigo
    private string Status { get; set; } = "Total Pendiente"; //Status
    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar
    private bool cargandocambio { get; set; } = false; //para cargar los datos del trazabilidad
    private string tipoconsulta { get; set; } = "0"; //1-fecha de reuinion 0 fecha trabajo
    private int idrespo { get; set; }  //responsable a filtarint.Parse(claims[9].Value)

    public DateTime fecha1;
    public DateTime fecha2;
    List<ReuDium> listareu = new List<ReuDium>();//filtar los responsables
    List<CambFec> cambiofechas = new List<CambFec>();
    List<CambStat> cambiostatuss = new List<CambStat>();

    private List<Claim> claims { get; set; }

    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        fecha1 = DateTime.Now;
        fecha2 = DateTime.Now;
        await CreateData();
        //IdCentro = int.Parse(claims[11].Value);
        //IdDiv = int.Parse(claims[12].Value);

        IdCentro = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
        IdDiv = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdDiv"))?.Value);

        if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "Admin" | claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "SuperAdmin")
        {
            UsrAdmin = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
            await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);

        }
        else if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "SupIntendenteGeneral")
        {
            UsrAdmin = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
            await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
        }
        else if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "Planificador" | claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "SupIntendente")
        {
            await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
        }
        else if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "MttoAdmin")
        {
            UsrRol = "Mtto";
            await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
        }
        else
        {
            if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "Mantenimiento")
            {
                UsrRol = "Mtto";
            }
            else
            {
                UsrRol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
            }

            await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);

        }

        //Si es el comedor busca los equipos
        if (claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value == "11")
        {
            CentroComedor = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
            await APIReunionService.GetEquiposCentro(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
        }



        await APIReunionService.Getksf();
        await APIReunionService.GetResReu();
        APIReunionService.resporeu = APIReunionService.resporeu.Where(a => a.Rrdesc == claims.FirstOrDefault(c => c.Type.Contains("Empresa"))?.Value | string.IsNullOrEmpty(a.Rrdesc)).ToList();
        DbReunionService.reudiatablas = new List<ReuDium>();

    }

    protected async Task Get()
    {
        if (IdCentro != 0 & IdDiv != 0)
        {
            error = null;
            if (dataIsLoaded != 1)
            {
                dataIsLoaded = 1;

                //await DbReunionService.GetPendientes(Div, Division, fecha1, fecha2, tipoconsulta);
                await DbReunionService.GetPendientes(IdCentro.ToString(), IdDiv.ToString(), fecha1, fecha2, tipoconsulta, Status);
                dataIsLoaded = 2;
                //IdCentro = 0;
                //IdDiv = 0;
            }

        }
        else
        {
            error = "Seleccione los valores en las listas*";
        }
    }
    protected void DivReset()
    {
        IdDiv = 0;
    }
    protected async Task GetHistory(int idreu)
    {
        cargandocambio = false;
        cambiostatuss = new List<CambStat>();
        cambiofechas = new List<CambFec>();
        await DbReunionService.GetCambioStatus(idreu);
        await DbReunionService.GetCambioFecha(idreu);
        cambiofechas = DbReunionService.cambiofecha;
        cambiostatuss = DbReunionService.cambiostatus;

        cargandocambio = true;

    }


    void Editar(int id)
    {
        NavigationManager.NavigateTo($"EditDisc/{id}/{tipoconsulta}/{fecha1.ToString("dd-MM-yyyy")}/{fecha2.ToString("dd-MM-yyyy")}/{Status}");

    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {

            if (accion != null)
            {
                string[] fec1 = f1.Split('-');
                string[] fec2 = f2.Split('-');

                //año, mes dia
                DateTime date1 = new DateTime(int.Parse(fec1[2]), int.Parse(fec1[1]), int.Parse(fec1[0]));
                DateTime date2 = new DateTime(int.Parse(fec2[2]), int.Parse(fec2[1]), int.Parse(fec2[0]));
                fecha1 = date1;
                fecha2 = date2;
                IdCentro = int.Parse(accion);
                IdDiv = int.Parse(division);
                tipoconsulta = tipo;
                dataIsLoaded = 1;
                await DbReunionService.GetPendientes(accion, division, date1, date2, tipo, est);
                dataIsLoaded = 2;

            }
        }
        catch (Exception ex)
        {
            error = "" + ex;
        }

    }

    public async Task PrintDocument()
    {
        //NavigationManager.NavigateTo($"TablaReunion/{IdCentro.ToString()}/{IdDiv.ToString()}/{DateTime.Now.AddDays(-1).ToString("dd-MM-yyyy")}/{DateTime.Now.ToString("dd-MM-yyyy")}/1", forceLoad: true);
        await IJS.InvokeAsync<object>("open", new object[] { $"TablaPendientes/{IdCentro.ToString()}/{IdDiv.ToString()}/{fecha1.ToString("dd-MM-yyyy")}/{fecha2.ToString("dd-MM-yyyy")}/{tipoconsulta}/{Status}/{idrespo}", "_blank" });
    }
}
