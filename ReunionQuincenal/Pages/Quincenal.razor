@page "/turno"

@inject IAsistenciaReuData AsistenciaReuData
@inject IAvisadorData AvisadorData
@inject ICargoReuData CargoReuData
@inject IKsfData KsfData
@inject IPizarraData PizarraData
@inject IRespoReuData RespoReuData
@inject IMaestraData MaestraData
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Admin, AdminChempro, SupIntendente, SupIntendenteGeneral,SuperAdmin")]

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consolidacion</title>
</head>
<body>
    <h3>Consolidacion de Discrepancia</h3>
@* ccc *@
    <div class="box-reuform">
        <div class="box-reuCent">
            <label for="">Centro 
            <BSInput InputType="InputType.Select" class="Form-imput" @onchange="BuscarDivision" @bind-Value="idCent" >
                <option value="0">Selecione un Centro</option>
                @if(MaestraData.centro != null){
                    @foreach (var d in MaestraData.centro)
                    {
                            <option value="@d.IdCentro">@d.Centro</option>

                    }
                }
            </BSInput>
            </label>
        </div>
        <div class="box-reuDiv">
            <label for="">Division
            <BSInput InputType="InputType.Select" class="Form-imput" @bind-Value="idDiv" >
                <option value="0">Selecione una Division</option>
                @if(MaestraData.centro != null){
                    @foreach (var d in MaestraData.divisions)
                    {
                            <option value="@d.IdDivision">@d.Ndivision</option>

                    }
                }
            </BSInput>
            </label>
        </div>
        
            <div class="botton-Disc">
                <button  @onclick="buscar" type="submit" id="btn-disc" class="btn btn-primary mb-3">Buscar</button>
            </div>
        </div>
        @if(band == true){

            @if(PizarraData.listaCambiReu.Count() > 0)
            {
            <RadzenDataGrid @ref="reunion" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="10" AllowSorting="true" 
                        Data="@PizarraData.listaCambiReu" TItem="CambiReuVDTO" >
                <Columns>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="Linea" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@data.Linea</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="C. Equipo" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@data.EquipoCodigo</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="Discrepancia" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@data.Discrepancia</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="Plan de Accion" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@data.Accion</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="F. Reunion" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@data.FechaCambio</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="5%" TItem="CambiReuVDTO" Title="Acciones" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenButton Icon="add" Size="ButtonSize.Small" Click="@(() => Add(data))" />
                            <RadzenButton Icon="delete" Size="ButtonSize.Small" Click="@(() => Rechazada(data))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
                </RadzenDataGrid>
            } else
            {
                <p><Noframes> hay registros vencidos</Noframes></p>
            }

        }
</body>
<style>
    .box-reuform{
    padding-top: 10px;
    display: flex;
    justify-content: flex-start; /* O flex-start para alinear a la izquierda */
    align-items: center;
    /* height: 100vh; */
}


.box-reuCent{
    margin: 10px;
}
.box-reuDiv{
    margin: 10px;

    using ReunionWeb.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "c:\Users\geohandry.nunez\workspace\git\git05\ReunionWeb\Pages\Turno.razor"
ition: relative; /* o absolute, dependiendo de tus necesidades */
    bottom: 10px; /* Ajusta según sea necesario */
    left: 20px; /* Ajusta según sea necesario */
}

.botton-Disc{
    padding: 20px;
    padding-top: 40px;
}

#btn-disc{
    background-color: #00aa7b;
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}
#btn-disc:hover{
        background-color: #00b356;
}
</style>
</html>

@code{
    int idCent = 0;
    int idDiv = 0;
    string estado { get; set; }
    bool band = false;
    public DateTime fecha1;
    public DateTime fecha2;
    private List<Claim> claims { get; set; }
    private string mensaje = "";
    public RadzenDataGrid<CambiReuVDTO> reunion {get; set;} = new RadzenDataGrid<CambiReuVDTO>();
    private NotifiRadzen Notificar = new NotifiRadzen();
    

   private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        fecha1 = DateTime.Now;
        fecha2 = DateTime.Now;
        await CreateData();

        PizarraData.reudiatablas = new List<ReunionDTO>();
        if (claims != null && claims.Count > 1 && (claims[1]?.Value == "Admin" || claims[1]?.Value == "SuperAdmin"))
        {

            await MaestraData.GetCentrosxEmpresa("All" + claims[10].Value);
        }
        else
        {
            await MaestraData.GetCentrosxEmpresa(claims[11].Value);
        }
    }
        protected async Task BuscarDivision(ChangeEventArgs e){
            idCent = int.Parse(e.Value.ToString());
            idDiv = 0;
            try{
                if(idCent != 0){
                    MaestraData.divisions = await MaestraData.ObtenerDivisionDelCentro(idCent);
                }
            }catch(Exception ex){
                mensaje = "Error: " + ex.Message;
            }
        }

    protected async Task buscar(){
        if(idCent != 0 && idDiv != 0)
        {
            string idCentro = idCent.ToString();
            string IdDivision = idDiv.ToString();
            PizarraData.listaCambiReu = await PizarraData.GetPendientesQuincenal2(idCentro, IdDivision);
            band = true;
        } else
        {
            mensaje = "Verifique todos los campos";
            NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));

        }
    }

    protected async Task Add(CambiReuVDTO e)
    {
        ReunionDTO registro;
        registro = await PizarraData.GetDiscrepantacia(e.IdReuDia);
        registro.IdTipReu = 1;
        bool validacion = await PizarraData.UpdateDiscrepancia3(registro, registro.IdReuDia);
        if( validacion == true)
        {
            mensaje = "Se agrego correctamente a la Reunion diaria";
            NotificationService.Notify(Notificar.Notificacion("exito", mensaje, ""));
            await buscar();
        } else
        {
            mensaje = "No pudo ser Agregada";
            NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));

        }
    }
    protected async Task Rechazada(CambiReuVDTO e)
    {
        ReunionDTO registro;
        registro = await PizarraData.GetDiscrepantacia(e.IdReuDia);
        registro.IdTipReu = 1;
        registro.Rdstatus = "Rechazada";
        bool validacion = await PizarraData.UpdateDiscrepancia3(registro, registro.IdReuDia);
        if( validacion == true)
        {
            mensaje = "La reunion a sido rechazada";
            NotificationService.Notify(Notificar.Notificacion("exito", mensaje, ""));
            await buscar();

        } else
        {
            mensaje = "No pudo ser rechazada";
            NotificationService.Notify(Notificar.Notificacion("advertencia", mensaje, ""));
        }
    }

}